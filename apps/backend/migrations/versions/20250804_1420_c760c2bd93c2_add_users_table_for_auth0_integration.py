"""Add users table for Auth0 integration

Revision ID: c760c2bd93c2
Revises: 2b8812283e69
Create Date: 2025-08-04 14:20:16.496328

"""
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

from alembic import op

# revision identifiers, used by Alembic.
revision = "c760c2bd93c2"
down_revision = "2b8812283e69"
branch_labels = None
depends_on = None


def upgrade() -> None:
    """Upgrade database schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "users",
        sa.Column("email", sa.String(length=255), nullable=False),
        sa.Column("provider_id", sa.String(length=255), nullable=False),
        sa.Column("provider_name", sa.String(length=100), nullable=False),
        sa.Column("first_name", sa.String(length=100), nullable=True),
        sa.Column("last_name", sa.String(length=100), nullable=True),
        sa.Column("display_name", sa.String(length=200), nullable=True),
        sa.Column("avatar_url", sa.String(length=500), nullable=True),
        sa.Column("roles", sa.JSON(), nullable=False),
        sa.Column("permissions", sa.JSON(), nullable=False),
        sa.Column("is_active", sa.Boolean(), nullable=False),
        sa.Column("is_admin", sa.Boolean(), nullable=False),
        sa.Column("last_login_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("login_count", sa.String(length=50), nullable=False),
        sa.Column("failed_login_attempts", sa.String(length=50), nullable=False),
        sa.Column("locked_until", sa.DateTime(timezone=True), nullable=True),
        sa.Column("mfa_enabled", sa.Boolean(), nullable=False),
        sa.Column("mfa_secret", sa.String(length=255), nullable=True),
        sa.Column("backup_codes", sa.JSON(), nullable=False),
        sa.Column("oidc_refresh_token_hash", sa.String(length=255), nullable=True),
        sa.Column("oidc_token_expires_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("correlation_id", sa.String(length=255), nullable=True),
        sa.Column("tenant_id", sa.String(length=255), nullable=True),
        sa.PrimaryKeyConstraint("id"),
    )
    # Skip JSON index - PostgreSQL doesn't support btree indexes on JSON columns
    # op.create_index('idx_users_active_roles', 'users', ['is_active', 'roles'], unique=False)
    op.create_index(
        "idx_users_email_active", "users", ["email", "is_active"], unique=False
    )
    op.create_index("idx_users_last_login", "users", ["last_login_at"], unique=False)
    op.create_index(
        "idx_users_provider", "users", ["provider_name", "provider_id"], unique=False
    )
    op.create_index(
        op.f("ix_users_correlation_id"), "users", ["correlation_id"], unique=False
    )
    op.create_index(op.f("ix_users_email"), "users", ["email"], unique=True)
    op.create_index(op.f("ix_users_is_active"), "users", ["is_active"], unique=False)
    op.create_index(
        op.f("ix_users_provider_id"), "users", ["provider_id"], unique=False
    )
    op.create_index(op.f("ix_users_tenant_id"), "users", ["tenant_id"], unique=False)
    op.drop_index(
        "idx_auth_tokens_tenant_status_expires",
        table_name="auth_tokens",
        postgresql_where="(tenant_id IS NOT NULL)",
    )
    op.drop_index(
        "idx_auth_tokens_user_status_type",
        table_name="auth_tokens",
        postgresql_where="(user_id IS NOT NULL)",
    )
    op.drop_constraint(
        "auth_tokens_parent_token_id_fkey", "auth_tokens", type_="foreignkey"
    )
    op.drop_index(
        "idx_encryption_keys_expires_status",
        table_name="encryption_keys",
        postgresql_where="(expires_at IS NOT NULL)",
    )
    op.drop_index(
        "idx_encryption_keys_tenant_name_version",
        table_name="encryption_keys",
        postgresql_where="(tenant_id IS NOT NULL)",
    )
    op.drop_index(
        "idx_fhir_mappings_active_internal",
        table_name="fhir_mappings",
        postgresql_where="(is_active = true)",
    )
    op.drop_index(
        "idx_fhir_mappings_error_status_count",
        table_name="fhir_mappings",
        postgresql_where="((error_count)::integer > 0)",
    )
    op.drop_index(
        "idx_fhir_mappings_server_resource_type",
        table_name="fhir_mappings",
        postgresql_where="(fhir_server_url IS NOT NULL)",
    )
    op.drop_index(
        "idx_locations_active_name",
        table_name="locations",
        postgresql_where="(is_active = true)",
    )
    op.drop_index("idx_locations_geography", table_name="locations")
    op.drop_index("idx_locations_practice_active", table_name="locations")
    op.drop_index(
        "idx_practice_profiles_active_name",
        table_name="practice_profiles",
        postgresql_where="(is_active = true)",
    )
    op.drop_index(
        "idx_practice_profiles_tenant_active",
        table_name="practice_profiles",
        postgresql_where="(tenant_id IS NOT NULL)",
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade database schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_index(
        "idx_practice_profiles_tenant_active",
        "practice_profiles",
        ["tenant_id", "is_active"],
        unique=False,
        postgresql_where="(tenant_id IS NOT NULL)",
    )
    op.create_index(
        "idx_practice_profiles_active_name",
        "practice_profiles",
        ["name"],
        unique=False,
        postgresql_where="(is_active = true)",
    )
    op.create_index(
        "idx_locations_practice_active",
        "locations",
        ["practice_profile_id", "is_active"],
        unique=False,
    )
    op.create_index(
        "idx_locations_geography",
        "locations",
        ["city", "state", "zip_code"],
        unique=False,
    )
    op.create_index(
        "idx_locations_active_name",
        "locations",
        ["name"],
        unique=False,
        postgresql_where="(is_active = true)",
    )
    op.create_index(
        "idx_fhir_mappings_server_resource_type",
        "fhir_mappings",
        ["fhir_server_url", "fhir_resource_type"],
        unique=False,
        postgresql_where="(fhir_server_url IS NOT NULL)",
    )
    op.create_index(
        "idx_fhir_mappings_error_status_count",
        "fhir_mappings",
        ["error_count", "status"],
        unique=False,
        postgresql_where="((error_count)::integer > 0)",
    )
    op.create_index(
        "idx_fhir_mappings_active_internal",
        "fhir_mappings",
        ["internal_id"],
        unique=False,
        postgresql_where="(is_active = true)",
    )
    op.create_index(
        "idx_encryption_keys_tenant_name_version",
        "encryption_keys",
        ["tenant_id", "key_name", "version"],
        unique=False,
        postgresql_where="(tenant_id IS NOT NULL)",
    )
    op.create_index(
        "idx_encryption_keys_expires_status",
        "encryption_keys",
        ["expires_at", "status"],
        unique=False,
        postgresql_where="(expires_at IS NOT NULL)",
    )
    op.create_foreign_key(
        "auth_tokens_parent_token_id_fkey",
        "auth_tokens",
        "auth_tokens",
        ["parent_token_id"],
        ["id"],
        ondelete="SET NULL",
    )
    op.create_index(
        "idx_auth_tokens_user_status_type",
        "auth_tokens",
        ["user_id", "status", "token_type"],
        unique=False,
        postgresql_where="(user_id IS NOT NULL)",
    )
    op.create_index(
        "idx_auth_tokens_tenant_status_expires",
        "auth_tokens",
        ["tenant_id", "status", "expires_at"],
        unique=False,
        postgresql_where="(tenant_id IS NOT NULL)",
    )
    op.drop_index(op.f("ix_users_tenant_id"), table_name="users")
    op.drop_index(op.f("ix_users_provider_id"), table_name="users")
    op.drop_index(op.f("ix_users_is_active"), table_name="users")
    op.drop_index(op.f("ix_users_email"), table_name="users")
    op.drop_index(op.f("ix_users_correlation_id"), table_name="users")
    op.drop_index("idx_users_provider", table_name="users")
    op.drop_index("idx_users_last_login", table_name="users")
    op.drop_index("idx_users_email_active", table_name="users")
    op.drop_index("idx_users_active_roles", table_name="users")
    op.drop_table("users")
    # ### end Alembic commands ###
