"""add_auth_tokens_table

Revision ID: 36e149658444
Revises: e8d4947f3106
Create Date: 2025-08-03 22:03:10.776349

"""
import sqlalchemy as sa
from sqlalchemy import JSON
from sqlalchemy.dialects import postgresql
from sqlalchemy.sql import sqltypes

from alembic import op


class JSONBType(sqltypes.TypeDecorator):
    """A type that uses JSONB for PostgreSQL and JSON for other databases."""

    impl = JSON
    cache_ok = True

    def load_dialect_impl(self, dialect):
        if dialect.name == "postgresql":
            return dialect.type_descriptor(postgresql.JSONB())
        else:
            return dialect.type_descriptor(JSON())


# revision identifiers, used by Alembic.

# revision identifiers, used by Alembic.
revision = "36e149658444"
down_revision = "e8d4947f3106"
branch_labels = None
depends_on = None


def upgrade() -> None:
    """Upgrade database schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "auth_tokens",
        sa.Column("token_hash", sa.String(length=128), nullable=False),
        sa.Column(
            "token_type",
            sa.Enum(
                "ACCESS",
                "REFRESH",
                "RESET_PASSWORD",
                "EMAIL_VERIFICATION",
                "API_KEY",
                name="tokentype",
            ),
            nullable=False,
        ),
        sa.Column(
            "status",
            sa.Enum("ACTIVE", "EXPIRED", "REVOKED", "USED", name="tokenstatus"),
            nullable=False,
        ),
        sa.Column("user_id", sa.UUID(), nullable=True),
        sa.Column("issued_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("expires_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("last_used_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("revoked_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("issuer", sa.String(length=255), nullable=False),
        sa.Column("audience", sa.String(length=255), nullable=False),
        sa.Column("scopes", JSONBType, nullable=True),
        sa.Column("client_ip_hash", sa.String(length=128), nullable=True),
        sa.Column("user_agent_hash", sa.String(length=128), nullable=True),
        sa.Column("parent_token_id", sa.UUID(), nullable=True),
        sa.Column("rotation_count", sa.Integer(), nullable=False, default=0),
        sa.Column("token_metadata", JSONBType, nullable=True),
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("correlation_id", sa.String(length=255), nullable=True),
        sa.Column("tenant_id", sa.String(length=255), nullable=True),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        "idx_auth_tokens_cleanup",
        "auth_tokens",
        ["status", "expires_at", "created_at"],
        unique=False,
    )
    op.create_index(
        "idx_auth_tokens_correlation", "auth_tokens", ["correlation_id"], unique=False
    )
    op.create_index("idx_auth_tokens_hash", "auth_tokens", ["token_hash"], unique=False)
    op.create_index(
        "idx_auth_tokens_parent", "auth_tokens", ["parent_token_id"], unique=False
    )
    op.create_index(
        "idx_auth_tokens_status_expires",
        "auth_tokens",
        ["status", "expires_at"],
        unique=False,
    )
    op.create_index(
        "idx_auth_tokens_user_type",
        "auth_tokens",
        ["user_id", "token_type"],
        unique=False,
    )
    op.create_index(
        op.f("ix_auth_tokens_correlation_id"),
        "auth_tokens",
        ["correlation_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_auth_tokens_expires_at"), "auth_tokens", ["expires_at"], unique=False
    )
    op.create_index(
        op.f("ix_auth_tokens_parent_token_id"),
        "auth_tokens",
        ["parent_token_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_auth_tokens_status"), "auth_tokens", ["status"], unique=False
    )
    op.create_index(
        op.f("ix_auth_tokens_tenant_id"), "auth_tokens", ["tenant_id"], unique=False
    )
    op.create_index(
        op.f("ix_auth_tokens_token_hash"), "auth_tokens", ["token_hash"], unique=True
    )
    op.create_index(
        op.f("ix_auth_tokens_token_type"), "auth_tokens", ["token_type"], unique=False
    )
    op.create_index(
        op.f("ix_auth_tokens_user_id"), "auth_tokens", ["user_id"], unique=False
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade database schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f("ix_auth_tokens_user_id"), table_name="auth_tokens")
    op.drop_index(op.f("ix_auth_tokens_token_type"), table_name="auth_tokens")
    op.drop_index(op.f("ix_auth_tokens_token_hash"), table_name="auth_tokens")
    op.drop_index(op.f("ix_auth_tokens_tenant_id"), table_name="auth_tokens")
    op.drop_index(op.f("ix_auth_tokens_status"), table_name="auth_tokens")
    op.drop_index(op.f("ix_auth_tokens_parent_token_id"), table_name="auth_tokens")
    op.drop_index(op.f("ix_auth_tokens_expires_at"), table_name="auth_tokens")
    op.drop_index(op.f("ix_auth_tokens_correlation_id"), table_name="auth_tokens")
    op.drop_index("idx_auth_tokens_user_type", table_name="auth_tokens")
    op.drop_index("idx_auth_tokens_status_expires", table_name="auth_tokens")
    op.drop_index("idx_auth_tokens_parent", table_name="auth_tokens")
    op.drop_index("idx_auth_tokens_hash", table_name="auth_tokens")
    op.drop_index("idx_auth_tokens_correlation", table_name="auth_tokens")
    op.drop_index("idx_auth_tokens_cleanup", table_name="auth_tokens")
    op.drop_table("auth_tokens")
    # ### end Alembic commands ###
