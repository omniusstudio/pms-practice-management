name: Kubernetes Deployment

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
      deployment_method:
        description: 'Deployment method'
        required: true
        default: 'helm'
        type: choice
        options:
        - helm
        - kubectl
      version:
        description: 'Version to deploy (e.g., v1.2.3)'
        required: true
        type: string
      rollback:
        description: 'Rollback to previous version'
        required: false
        default: false
        type: boolean
      dry_run:
        description: 'Perform dry run only'
        required: false
        default: false
        type: boolean

env:
  AWS_REGION: 'us-east-1'
  KUBECTL_VERSION: 'v1.28.0'
  HELM_VERSION: 'v3.12.0'

jobs:
  validate-k8s:
    name: Validate Kubernetes Configuration
    runs-on: ubuntu-latest
    if: ${{ !inputs.rollback }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up kubectl
        uses: azure/setup-kubectl@v4
        with:
          version: ${{ env.KUBECTL_VERSION }}

      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: ${{ env.HELM_VERSION }}

      - name: Validate Kubernetes manifests
        run: |
          # Validate raw Kubernetes manifests
          kubectl --dry-run=client apply -f apps/infra/kubernetes/namespace.yaml
          kubectl --dry-run=client apply -f apps/infra/kubernetes/configmap.yaml
          kubectl --dry-run=client apply -f apps/infra/kubernetes/backend-deployment.yaml
          kubectl --dry-run=client apply -f apps/infra/kubernetes/frontend-deployment.yaml
          kubectl --dry-run=client apply -f apps/infra/kubernetes/ingress.yaml
          kubectl --dry-run=client apply -f apps/infra/kubernetes/hpa.yaml
          kubectl --dry-run=client apply -f apps/infra/kubernetes/pdb.yaml
          kubectl --dry-run=client apply -f apps/infra/kubernetes/network-policy.yaml

      - name: Validate Helm chart
        run: |
          cd apps/infra/kubernetes/helm/pms
          helm lint .
          helm template pms . --values values.yaml --dry-run

      - name: Security scan Kubernetes manifests
        uses: azure/k8s-lint@v3
        with:
          manifests: |
            apps/infra/kubernetes/namespace.yaml
            apps/infra/kubernetes/configmap.yaml
            apps/infra/kubernetes/backend-deployment.yaml
            apps/infra/kubernetes/frontend-deployment.yaml
            apps/infra/kubernetes/ingress.yaml
            apps/infra/kubernetes/hpa.yaml
            apps/infra/kubernetes/pdb.yaml
            apps/infra/kubernetes/network-policy.yaml

  deploy-k8s:
    name: Deploy to Kubernetes
    runs-on: ubuntu-latest
    needs: validate-k8s
    if: always() && (needs.validate-k8s.result == 'success' || inputs.rollback)
    environment:
      name: ${{ inputs.environment }}
      url: ${{ inputs.environment == 'production' && 'https://pms.example.com' || 'https://staging.pms.example.com' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Set up kubectl
        uses: azure/setup-kubectl@v4
        with:
          version: ${{ env.KUBECTL_VERSION }}

      - name: Set up Helm
        if: ${{ inputs.deployment_method == 'helm' }}
        uses: azure/setup-helm@v3
        with:
          version: ${{ env.HELM_VERSION }}

      - name: Configure kubectl
        run: |
          aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name pms-${{ inputs.environment }}-cluster
          kubectl cluster-info

      - name: Create namespace if not exists
        run: |
          kubectl create namespace pms --dry-run=client -o yaml | kubectl apply -f -

      - name: Deploy with Helm
        if: ${{ inputs.deployment_method == 'helm' && !inputs.rollback }}
        run: |
          cd apps/infra/kubernetes/helm/pms

          # Set environment-specific values
          VALUES_FILE="values-${{ inputs.environment }}.yaml"
          if [ ! -f "$VALUES_FILE" ]; then
            VALUES_FILE="values.yaml"
          fi

          HELM_ARGS="--namespace pms --create-namespace --wait --timeout 10m"

          if [ "${{ inputs.dry_run }}" == "true" ]; then
            HELM_ARGS="$HELM_ARGS --dry-run"
          fi

          # Deploy or upgrade
          helm upgrade --install pms . \
            --values $VALUES_FILE \
            --set app.version=${{ inputs.version }} \
            --set app.environment=${{ inputs.environment }} \
            --set backend.image.tag=${{ inputs.version }} \
            --set frontend.image.tag=${{ inputs.version }} \
            $HELM_ARGS

      - name: Deploy with kubectl
        if: ${{ inputs.deployment_method == 'kubectl' && !inputs.rollback }}
        run: |
          cd apps/infra/scripts
          chmod +x deploy-k8s.sh

          if [ "${{ inputs.dry_run }}" == "true" ]; then
            export DRY_RUN=true
          fi

          ./deploy-k8s.sh ${{ inputs.environment }} ${{ inputs.version }}

      - name: Rollback deployment
        if: ${{ inputs.rollback }}
        run: |
          cd apps/infra/scripts
          chmod +x rollback-k8s.sh

          if [ "${{ inputs.deployment_method }}" == "helm" ]; then
            # Helm rollback
            helm rollback pms --namespace pms
          else
            # Kubectl rollback
            ./rollback-k8s.sh ${{ inputs.environment }}
          fi

      - name: Wait for deployment
        if: ${{ !inputs.dry_run }}
        run: |
          echo "Waiting for deployments to be ready..."
          kubectl wait --for=condition=available --timeout=600s deployment/pms-backend -n pms
          kubectl wait --for=condition=available --timeout=600s deployment/pms-frontend -n pms

          echo "Checking pod status..."
          kubectl get pods -n pms -l app.kubernetes.io/name=pms

      - name: Run health checks
        if: ${{ !inputs.dry_run }}
        run: |
          # Get the ingress URL
          INGRESS_URL="${{ inputs.environment == 'production' && 'https://pms.example.com' || 'https://staging.pms.example.com' }}"

          echo "Running health checks against $INGRESS_URL"

          # Wait for ingress to be ready
          sleep 30

          # Health check endpoints
          curl -f $INGRESS_URL/health || exit 1
          curl -f $INGRESS_URL/healthz || exit 1
          curl -f $INGRESS_URL/api/docs || exit 1

          # Verify version
          VERSION_RESPONSE=$(curl -s $INGRESS_URL/healthz)
          echo "Deployed version: $VERSION_RESPONSE"

      - name: Run Kubernetes diagnostics
        if: ${{ !inputs.dry_run }}
        run: |
          echo "=== Deployment Status ==="
          kubectl get deployments -n pms

          echo "=== Pod Status ==="
          kubectl get pods -n pms

          echo "=== Service Status ==="
          kubectl get services -n pms

          echo "=== Ingress Status ==="
          kubectl get ingress -n pms

          echo "=== HPA Status ==="
          kubectl get hpa -n pms

          echo "=== PDB Status ==="
          kubectl get pdb -n pms

          echo "=== Events ==="
          kubectl get events -n pms --sort-by='.lastTimestamp' | tail -20

      - name: Generate deployment report
        if: ${{ !inputs.dry_run }}
        run: |
          cat > deployment-report.md << EOF
          # Kubernetes Deployment Report

          **Environment:** ${{ inputs.environment }}
          **Version:** ${{ inputs.version }}
          **Method:** ${{ inputs.deployment_method }}
          **Rollback:** ${{ inputs.rollback }}
          **Timestamp:** $(date -u +%Y-%m-%dT%H:%M:%SZ)
          **Deployed by:** ${{ github.actor }}

          ## Deployment Status
          \`\`\`
          $(kubectl get deployments -n pms)
          \`\`\`

          ## Pod Status
          \`\`\`
          $(kubectl get pods -n pms)
          \`\`\`

          ## Service Endpoints
          \`\`\`
          $(kubectl get ingress -n pms)
          \`\`\`
          EOF

          echo "Deployment report generated:"
          cat deployment-report.md

      - name: Upload deployment artifacts
        if: ${{ !inputs.dry_run }}
        uses: actions/upload-artifact@v4
        with:
          name: k8s-deployment-report-${{ inputs.environment }}-${{ inputs.version }}
          path: deployment-report.md
          retention-days: 30

      - name: Notify deployment status
        run: |
          if [ "${{ inputs.rollback }}" == "true" ]; then
            echo "ðŸ”„ Kubernetes rollback completed for ${{ inputs.environment }}"
          elif [ "${{ inputs.dry_run }}" == "true" ]; then
            echo "âœ… Kubernetes dry-run completed for ${{ inputs.environment }}"
          else
            echo "ðŸš€ Kubernetes deployment completed for ${{ inputs.environment }}"
          fi
          echo "Version: ${{ inputs.version }}"
          echo "Method: ${{ inputs.deployment_method }}"
          echo "Environment: ${{ inputs.environment }}"
