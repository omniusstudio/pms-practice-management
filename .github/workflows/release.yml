name: Release

on:
  push:
    branches:
      - main
      - develop
  workflow_dispatch:
    inputs:
      dry_run:
        description: 'Dry run (no actual release)'
        required: false
        default: false
        type: boolean

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

jobs:
  # Ensure all CI checks pass before release
  validate:
    name: Validate Release Prerequisites
    runs-on: ubuntu-latest
    outputs:
      should_release: ${{ steps.check.outputs.should_release }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Check if release is needed
        id: check
        run: |
          # Check if there are any commits since last release
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [ -z "$LAST_TAG" ]; then
            echo "should_release=true" >> $GITHUB_OUTPUT
            echo "No previous releases found, will create initial release"
          else
            COMMITS_SINCE_TAG=$(git rev-list ${LAST_TAG}..HEAD --count)
            if [ "$COMMITS_SINCE_TAG" -gt 0 ]; then
              echo "should_release=true" >> $GITHUB_OUTPUT
              echo "Found $COMMITS_SINCE_TAG commits since last release"
            else
              echo "should_release=false" >> $GITHUB_OUTPUT
              echo "No new commits since last release"
            fi
          fi

      - name: Validate conventional commits
        if: steps.check.outputs.should_release == 'true'
        run: |
          # Install commitlint
          npm install -g @commitlint/cli @commitlint/config-conventional
          
          # Check recent commits follow conventional format
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || git rev-list --max-parents=0 HEAD)
          git log ${LAST_TAG}..HEAD --oneline | while read commit; do
            echo "$commit" | commitlint --config .commitlintrc.json || {
              echo "❌ Commit does not follow conventional format: $commit"
              echo "Please ensure all commits follow: type(scope): description"
              exit 1
            }
          done

  # Run semantic release
  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: validate
    if: needs.validate.outputs.should_release == 'true'
    outputs:
      version: ${{ steps.semantic.outputs.version }}
      released: ${{ steps.semantic.outputs.released }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install semantic-release dependencies
        run: |
          npm install -g semantic-release \
            @semantic-release/changelog \
            @semantic-release/exec \
            @semantic-release/git \
            @semantic-release/github \
            conventional-changelog-conventionalcommits

      - name: Create release artifacts directory
        run: mkdir -p release-artifacts

      - name: Make scripts executable
        run: |
          chmod +x scripts/update-version.sh
          chmod +x scripts/generate-release-notes.js

      - name: Run semantic release
        id: semantic
        run: |
          if [ "${{ inputs.dry_run }}" = "true" ]; then
            echo "🔍 Running semantic-release in dry-run mode"
            npx semantic-release --dry-run
            echo "released=false" >> $GITHUB_OUTPUT
          else
            echo "🚀 Running semantic-release"
            npx semantic-release
            
            # Check if a release was created
            if [ -f "VERSION" ]; then
              VERSION=$(cat VERSION)
              echo "version=$VERSION" >> $GITHUB_OUTPUT
              echo "released=true" >> $GITHUB_OUTPUT
              echo "✅ Released version: $VERSION"
            else
              echo "released=false" >> $GITHUB_OUTPUT
              echo "ℹ️ No release created (no releasable changes)"
            fi
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload release artifacts
        if: steps.semantic.outputs.released == 'true'
        uses: actions/upload-artifact@v3
        with:
          name: release-artifacts-${{ steps.semantic.outputs.version }}
          path: |
            release-artifacts/
            CHANGELOG.md
            VERSION
          retention-days: 90

  # Trigger deployment pipeline with new version
  trigger-deployment:
    name: Trigger Deployment
    runs-on: ubuntu-latest
    needs: [validate, release]
    if: needs.release.outputs.released == 'true'
    steps:
      - name: Trigger CD pipeline
        uses: actions/github-script@v7
        with:
          script: |
            const { data: workflow } = await github.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'cd.yml',
              ref: 'main',
              inputs: {
                version: '${{ needs.release.outputs.version }}',
                environment: 'staging'
              }
            });
            
            console.log('✅ Triggered CD pipeline for version ${{ needs.release.outputs.version }}');

  # Notify stakeholders
  notify:
    name: Notify Release
    runs-on: ubuntu-latest
    needs: [release, trigger-deployment]
    if: needs.release.outputs.released == 'true'
    steps:
      - name: Create release summary
        run: |
          echo "## 🚀 Release Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** ${{ needs.release.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "**Triggered by:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Next Steps:**" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Release created and tagged" >> $GITHUB_STEP_SUMMARY
          echo "- 🔄 CD pipeline triggered for staging deployment" >> $GITHUB_STEP_SUMMARY
          echo "- 📋 Manual approval required for production deployment" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Links:**" >> $GITHUB_STEP_SUMMARY
          echo "- [Release Notes](https://github.com/${{ github.repository }}/releases/tag/v${{ needs.release.outputs.version }})" >> $GITHUB_STEP_SUMMARY
          echo "- [Deployment Pipeline](https://github.com/${{ github.repository }}/actions/workflows/cd.yml)" >> $GITHUB_STEP_SUMMARY

      # Add notification integrations here (Slack, email, etc.)
      - name: Placeholder for notifications
        run: |
          echo "🔔 Add notification integrations here:"
          echo "  - Slack webhook"
          echo "  - Email notifications"
          echo "  - Teams integration"
          echo "  - JIRA ticket updates"