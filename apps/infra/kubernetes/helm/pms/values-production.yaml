# Production Environment Values for PMS Helm Chart

# Global settings
global:
  environment: production
  domain: pms.example.com
  imagePullSecrets: []

# Application settings
app:
  name: pms
  version: "1.0.0"
  environment: production
  domain:
    primary: pms.example.com
    api: api.pms.example.com

# Backend configuration
backend:
  enabled: true
  name: pms-backend
  replicaCount: 3
  
  image:
    repository: "${ECR_REGISTRY}/pms-backend"
    tag: "latest"
    pullPolicy: Always
  
  service:
    type: ClusterIP
    port: 80
    targetPort: 8000
  
  resources:
    limits:
      cpu: 2000m
      memory: 2Gi
    requests:
      cpu: 1000m
      memory: 1Gi
  
  autoscaling:
    enabled: true
    minReplicas: 3
    maxReplicas: 10
    targetCPUUtilizationPercentage: 60
    targetMemoryUtilizationPercentage: 70
  
  livenessProbe:
    httpGet:
      path: /health
      port: http
    initialDelaySeconds: 60
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3
  
  readinessProbe:
    httpGet:
      path: /health
      port: http
    initialDelaySeconds: 10
    periodSeconds: 5
    timeoutSeconds: 3
    failureThreshold: 3
  
  podDisruptionBudget:
    enabled: true
    minAvailable: 2

# Frontend configuration
frontend:
  enabled: true
  name: pms-frontend
  replicaCount: 3
  
  image:
    repository: "${ECR_REGISTRY}/pms-frontend"
    tag: "latest"
    pullPolicy: Always
  
  service:
    type: ClusterIP
    port: 80
    targetPort: 80
  
  resources:
    limits:
      cpu: 1000m
      memory: 1Gi
    requests:
      cpu: 500m
      memory: 512Mi
  
  autoscaling:
    enabled: true
    minReplicas: 3
    maxReplicas: 8
    targetCPUUtilizationPercentage: 60
    targetMemoryUtilizationPercentage: 70
  
  livenessProbe:
    httpGet:
      path: /
      port: http
    initialDelaySeconds: 60
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3
  
  readinessProbe:
    httpGet:
      path: /
      port: http
    initialDelaySeconds: 10
    periodSeconds: 5
    timeoutSeconds: 3
    failureThreshold: 3
  
  podDisruptionBudget:
    enabled: true
    minAvailable: 2

# Ingress configuration
ingress:
  enabled: true
  className: nginx
  annotations:
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "100m"
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "120"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "120"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "120"
    nginx.ingress.kubernetes.io/rate-limit: "200"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
    nginx.ingress.kubernetes.io/server-snippet: |
      add_header X-Frame-Options "SAMEORIGIN" always;
      add_header X-Content-Type-Options "nosniff" always;
      add_header X-XSS-Protection "1; mode=block" always;
      add_header Referrer-Policy "strict-origin-when-cross-origin" always;
      add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self' data:; connect-src 'self' https:; frame-ancestors 'self';" always;
      add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
  
  hosts:
    - host: pms.example.com
      paths:
        - path: /
          pathType: Prefix
          service:
            name: pms-frontend
            port: 80
        - path: /api
          pathType: Prefix
          service:
            name: pms-backend
            port: 80
        - path: /docs
          pathType: Prefix
          service:
            name: pms-backend
            port: 80
        - path: /health
          pathType: Prefix
          service:
            name: pms-backend
            port: 80
  
  tls:
    - secretName: pms-production-tls
      hosts:
        - pms.example.com

# ConfigMap data (non-sensitive)
configMap:
  # Auth0 Configuration
  AUTH0_DOMAIN: "pms-prod.us.auth0.com"
  AUTH0_AUDIENCE: "https://api.pms.example.com"
  AUTH0_ISSUER: "https://pms-prod.us.auth0.com/"
  
  # API Configuration
  API_V1_STR: "/api/v1"
  PROJECT_NAME: "Mental Health PMS"
  
  # CORS Configuration
  BACKEND_CORS_ORIGINS: '["https://pms.example.com"]'
  
  # Logging Configuration
  LOG_LEVEL: "INFO"
  LOG_FORMAT: "json"
  DEBUG: "false"
  
  # Database Configuration (non-sensitive)
  DATABASE_HOST: "pms-production-postgres.rds.amazonaws.com"
  DATABASE_PORT: "5432"
  DATABASE_NAME: "pms_production"
  
  # Redis Configuration (non-sensitive)
  REDIS_HOST: "pms-production-redis.cache.amazonaws.com"
  REDIS_PORT: "6379"
  REDIS_DB: "0"
  
  # AWS Configuration
  AWS_REGION: "us-east-1"
  AWS_S3_BUCKET: "pms-production-uploads"

# Secret data (base64 encoded - these should be managed via external secret management)
secrets:
  # Database credentials
  DATABASE_USER: "cG1zX3Byb2RfdXNlcg=="  # pms_prod_user
  DATABASE_PASSWORD: "cHJvZF9wYXNzd29yZF8xMjM="  # prod_password_123
  
  # Redis credentials
  REDIS_PASSWORD: "cHJvZF9yZWRpc19wYXNzXzQ1Ng=="  # prod_redis_pass_456
  
  # Application secrets
  SECRET_KEY: "cHJvZF9zZWNyZXRfa2V5XzEyMzQ1Ng=="  # prod_secret_key_123456
  ALGORITHM: "SFMyNTY="  # HS256
  ACCESS_TOKEN_EXPIRE_MINUTES: "NjA="  # 60
  
  # AWS credentials
  AWS_ACCESS_KEY_ID: "QUtJQVBST0RVQ1RJT05LRVk="  # AKIAPRODUCTIONKEY
  AWS_SECRET_ACCESS_KEY: "cHJvZF9hd3Nfc2VjcmV0X2tleV8xMjM="  # prod_aws_secret_key_123
  
  # Auth0 credentials
  AUTH0_CLIENT_ID: "cHJvZF9hdXRoMF9jbGllbnRfaWRfMTIz"  # prod_auth0_client_id_123
  AUTH0_CLIENT_SECRET: "cHJvZF9hdXRoMF9jbGllbnRfc2VjcmV0XzQ1Ng=="  # prod_auth0_client_secret_456
  
  # OIDC credentials
  OIDC_CLIENT_ID: "cHJvZF9vaWRjX2NsaWVudF9pZF8xMjM="  # prod_oidc_client_id_123
  OIDC_CLIENT_SECRET: "cHJvZF9vaWRjX2NsaWVudF9zZWNyZXRfNDU2"  # prod_oidc_client_secret_456
  OIDC_DISCOVERY_URL: "aHR0cHM6Ly9wbXMtcHJvZC51cy5hdXRoMC5jb20vLndlbGwta25vd24vb3BlbmlkX2NvbmZpZ3VyYXRpb24="  # https://pms-prod.us.auth0.com/.well-known/openid_configuration

# RBAC
rbac:
  create: true
  serviceAccountName: pms-service-account

# Network Policy
networkPolicy:
  enabled: true
  policyTypes:
    - Ingress
    - Egress

# Dependencies
postgresql:
  enabled: false  # Using external RDS

redis:
  enabled: false  # Using external ElastiCache

nginx-ingress:
  enabled: true
  controller:
    replicaCount: 3
    resources:
      limits:
        cpu: 1000m
        memory: 1Gi
      requests:
        cpu: 500m
        memory: 512Mi
    nodeSelector:
      kubernetes.io/arch: amd64
    tolerations:
      - key: "node-role.kubernetes.io/master"
        operator: "Exists"
        effect: "NoSchedule"

cert-manager:
  enabled: true
  installCRDs: true
  resources:
    limits:
      cpu: 500m
      memory: 512Mi
    requests:
      cpu: 250m
      memory: 256Mi

# Monitoring (placeholder for future implementation)
monitoring:
  enabled: true
  prometheus:
    enabled: true
    retention: "30d"
    resources:
      limits:
        cpu: 1000m
        memory: 2Gi
      requests:
        cpu: 500m
        memory: 1Gi
  grafana:
    enabled: true
    resources:
      limits:
        cpu: 500m
        memory: 512Mi
      requests:
        cpu: 250m
        memory: 256Mi

# Backup (placeholder for future implementation)
backup:
  enabled: true
  schedule: "0 2 * * *"  # Daily at 2 AM
  retention: "30d"
  s3Bucket: "pms-production-backups"